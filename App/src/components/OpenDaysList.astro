---
import { hasPassed, getDay, getMonth, getYear, getHours, getMinutes } from '../scripts/DateUtils';
import { type OpenDays } from '../../../Data/types';

interface Props {
    openDays: OpenDays;
}

const { openDays } = Astro.props;
---

<article id={`open-days-list-${openDays.codice_MIUR}`}>
    {
        openDays.orari.map(orario => (
            <section data-orario={orario.inizio_orario}>
                <div>
                    <span>{getDay(orario.inizio_orario)}</span>
                    <span> {getMonth(orario.inizio_orario)}/{getYear(orario.inizio_orario)} </span>
                </div>

                <div>
                    <span>{orario.attivita} - {getHours(orario.inizio_orario)}:{getMinutes(orario.inizio_orario)} - {getHours(orario.fine_orario)}:{getMinutes(orario.fine_orario)} </span>
                    <span id={`open-day-${orario.inizio_orario}`}>{orario.descrizione}</span>
                </div>
            </section>
        ))
    }
</article>

<script is:inline define:vars={{ hasPassed, openDays }}>
    var now = new Date();

    const OPEN_DAYS_ARTICLE = document.getElementById(`open-days-list-${openDays.codice_MIUR}`);
    for (const SECTION_EL of OPEN_DAYS_ARTICLE.children) {
        let dataora = Date.parse(SECTION_EL.getAttribute("data-orario"));
        let color = dataora < now ? 'var(--tint-red)' : 'var(--background-primary)';
        
        SECTION_EL.children[0].setAttribute('style', 'background-color:' + color + ';')
    }

    openDays.orari.map(orario => {
        let descr = orario.descrizione;
        if(descr.includes('https://')){
            let url = descr.split(' ').filter(word => word.startsWith('https://'));
            descr = descr.replace(url[0], `<u><a href="${url}" target="_blank">link</a></u>` );
            document.getElementById(`open-day-${orario.inizio_orario}`).innerHTML = descr;
        }
    });

</script>

<style>
    article {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        flex-wrap: nowrap;

        gap: 2rem;
    }

    article > section {
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: center;

        gap: 1.5rem;
    }

    section > div {
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    /* Ball */
    /* ******************************************************************************** */

    section > div:first-child {
        padding: 0.8rem 0.2rem;
        width: 3rem;

        color: var(--foreground-primary);

        background-color: var(--background-primary);
        border-radius: 2rem;

        align-items: center;
        gap: 0.1rem;
    }

    section > div:first-child > span:first-child {
        font-size: 1.8rem;
    }

    section > div:first-child > span:last-child {
        font-size: 1rem;
    }

    /* Description */
    /* ******************************************************************************** */

    section > div:nth-child(2) {
        flex-basis: 100%;
        align-items: flex-start;

        gap: 0.5rem;
    }

    section > div:nth-child(2) > span:first-child {
        font-size: 1.3rem;
        font-weight: 500;
    }

    section > div:nth-child(2) > span:last-child {
        /* max-width: 25ch; */

        font-size: 1rem;
        line-height: 1.5rem;
        text-wrap: wrap;
        overflow-wrap: break-word;
    }

    /* For desktop: */
    @media only screen and (min-width: 768px) {
        section > div:first-child {
            height: 5rem;
            width: 5.5rem;

            padding: 0;

            border-radius: 4rem;
        }

        section > div:nth-child(2) > span:last-child {
            max-width: 50ch;
        }
    }

    /* For wide-desktop: */
    @media only screen and (min-width: 1536px) { }
</style>
