---
import '../styles/common.css';

import { SERVER_ADDRESS, SERVER_PORT } from '../../../Data/constants.ts';
import type { Institute } from '../../../Data/types';

import Navbar from '../components/Navbar.astro';
import Layout from '../layouts/Layout.astro';

const INSTITUTES_RAW = await fetch(`http://${SERVER_ADDRESS}:${SERVER_PORT}/instituti`);
const INSTITUTES: Institute[] = await INSTITUTES_RAW.json();
console.log(`[BUILD] (map.astro) Loaded ${INSTITUTES.length} institutes`);
---

<Layout>
    <Navbar current_view="map" />

    <main>
        <div id="mapdiv"></div>
    </main>
</Layout>

<script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/openlayers/2.11/lib/OpenLayers.js"></script>
<script is:inline define:vars={{ INSTITUTES }}>
    // Insert data
    let db = { dati: [] };
    db.dati = INSTITUTES.map(institute => {
        const SEDE = institute.sedi.find(sede => sede.codice_MIUR === institute.codice_MIUR);

        return {
            latitudine: SEDE.posizione.latitudine,
            longitudine: SEDE.posizione.longitudine,
            codice_MIUR: SEDE.codice_MIUR,
        };
    });

    // Set map config
    let map = new OpenLayers.Map('mapdiv');
    map.addLayer(new OpenLayers.Layer.OSM());

    const ZOOM = 15;
    let epsg4326 = new OpenLayers.Projection('EPSG:4326');
    let projectTo = map.getProjectionObject();
    let center_point = new OpenLayers.LonLat(11.0339548, 45.8891176).transform(epsg4326, projectTo);
    map.setCenter(center_point, ZOOM);

    // Set markers
    const MARKER_DATA = {
        externalGraphic: 'marker.png',
        graphicHeight: 21,
        graphicWidth: 20,
        graphicXOffset: -12,
        graphicYOffset: -25,
    };

    let marker_layer = new OpenLayers.Layer.Vector('Overlay');
    for (const data of db.dati) {
        let point = new OpenLayers.Geometry.Point(data.longitudine, data.latitudine).transform(epsg4326, projectTo);
        let marker = new OpenLayers.Feature.Vector(point, { codice_MIUR: data.codice_MIUR }, MARKER_DATA);
        marker_layer.addFeatures(marker);
    }
    map.addLayer(marker_layer);

    // Set controls
    let controls = {
        selector: new OpenLayers.Control.SelectFeature(marker_layer, {
            onSelect: createPopup,
            onUnselect: destroyPopup,
        }),
    };

    function createPopup(feature) {
        const CODICE_MIUR = feature.attributes.codice_MIUR;
        const INSTITUTE = INSTITUTES.find(institute => institute.codice_MIUR === CODICE_MIUR);
        const SEDE = INSTITUTE.sedi.find(sede => sede.codice_MIUR == CODICE_MIUR);

        const CONTENT = `
            <article>
                <span>${SEDE.name}</span>
                <nav>
                    <button onclick="window.open('${SEDE.website}', '_blank')">
                        <span class="material-symbols-outlined">&#xf728</span>
                    </button>

                    <button onclick="window.open('/sede/${SEDE.codice_MIUR}', '_parent')">
                        <span class="material-symbols-outlined">&#xe7ee</span>
                    </button>

                    <button onclick="window.open('https://www.google.com/maps/search/?api=1&query=${SEDE.posizione.indirizzo}', '_blank')">
                        <span class="material-symbols-outlined">&#xe0c8</span>
                    </button>
                </nav>
            </article>
        `;

        // Add popup
        feature.popup = new OpenLayers.Popup.FramedCloud('pop', feature.geometry.getBounds().getCenterLonLat(), null, CONTENT, null, true, () => controls['selector'].unselectAll());
        map.addPopup(feature.popup);
    }

    function destroyPopup(feature) {
        feature.popup.destroy();
        feature.popup = null;
    }

    map.addControl(controls['selector']);
    controls['selector'].activate();
</script>

<style is:inline>
    main {
        padding: 2% 2% 0 2%;

        width: 96%;
        height: 90%;
    }

    main > div {
        width: 100%;
        height: 100%;

        border-radius: 1rem;
        box-shadow:
            rgba(14, 30, 37, 0.12) 0px 2px 4px 0px,
            rgba(14, 30, 37, 0.32) 0px 2px 16px 0px;
    }

    article > span {
        text-wrap: wrap;
        text-align: center;

        font-size: 1.2rem;
    }
    article > nav {
        padding: 0.5rem 1.5rem;

        display: flex;
        align-items: center;
        justify-content: center;
        flex-wrap: nowrap;
        gap: 0.2rem;
    }

    nav > button {
        padding: 0.4rem;

        border: unset;
        background-color: unset;

        display: flex;
        align-items: center;
        flex-wrap: nowrap;

        cursor: pointer;
    }

    nav > button:hover button > span {
        color: var(--tint-orange);
    }

    nav > button:active button > span {
        /* TODO: Find nicer color */
        color: var(--background-primary);
    }

    button > span {
        font-size: 3rem;
    }


    /* Icon style */
    button > span {
        color: var(--foreground-secondary);
        /* font-size: var(--icon_size); */
        transition: 200ms;
    }

    button > span:hover {
        color: var(--tint-orange);
        transition: 100ms;
    }
</style>
