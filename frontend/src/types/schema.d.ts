/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/assets/{id}": {
    /**
     * Get an Asset
     * @description Image typed files can be dynamically resized and transformed to fit any need.
     */
    get: operations["getAsset"];
  };
  "/auth/login": {
    /**
     * Retrieve a Temporary Access Token
     * @description Retrieve a Temporary Access Token
     */
    post: operations["login"];
  };
  "/auth/refresh": {
    /**
     * Refresh Token
     * @description Refresh a Temporary Access Token.
     */
    post: operations["refresh"];
  };
  "/auth/logout": {
    /**
     * Log Out
     * @description Log Out
     */
    post: operations["logout"];
  };
  "/auth/password/request": {
    /**
     * Request a Password Reset
     * @description Request a reset password email to be send.
     */
    post: operations["passwordRequest"];
  };
  "/auth/password/reset": {
    /**
     * Reset a Password
     * @description The request a password reset endpoint sends an email with a link to the admin app which in turn uses this endpoint to allow the user to reset their password.
     */
    post: operations["passwordReset"];
  };
  "/auth/oauth": {
    /**
     * List OAuth Providers
     * @description List configured OAuth providers.
     */
    get: operations["oauth"];
  };
  "/auth/oauth/{provider}": {
    /**
     * Authenticated using an OAuth provider
     * @description Start OAuth flow using the specified provider
     */
    get: operations["oauthProvider"];
  };
  "/server/info": {
    /**
     * System Info
     * @description Perform a system status check and return the options.
     */
    get: operations["serverInfo"];
  };
  "/server/ping": {
    /**
     * Ping
     * @description Ping, pong. Ping.. pong.
     */
    get: operations["ping"];
  };
  "/folders": {
    /**
     * List Folders
     * @description List the folders.
     */
    get: operations["getFolders"];
  };
  "/folders/{id}": {
    /**
     * Retrieve a Folder
     * @description Retrieve a single folder by unique identifier.
     */
    get: operations["getFolder"];
  };
  "/files": {
    /**
     * List Files
     * @description List the files.
     */
    get: operations["getFiles"];
  };
  "/files/{id}": {
    /**
     * Retrieve a Files
     * @description Retrieve a single file by unique identifier.
     */
    get: operations["getFile"];
  };
  "/items/educational_paths": {
    /**
     * List Items
     * @description List the educational_paths items.
     */
    get: operations["readItemsEducationalPaths"];
  };
  "/items/educational_paths/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single educational_paths item by unique identifier.
     */
    get: operations["readSingleItemsEducationalPaths"];
  };
  "/items/school_types": {
    /**
     * List Items
     * @description List the school_types items.
     */
    get: operations["readItemsSchoolTypes"];
  };
  "/items/school_types/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single school_types item by unique identifier.
     */
    get: operations["readSingleItemsSchoolTypes"];
  };
  "/items/schools_educational_paths": {
    /**
     * List Items
     * @description List the schools_educational_paths items.
     */
    get: operations["readItemsSchoolsEducationalPaths"];
  };
  "/items/schools_educational_paths/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single schools_educational_paths item by unique identifier.
     */
    get: operations["readSingleItemsSchoolsEducationalPaths"];
  };
  "/items/school_emails": {
    /**
     * List Items
     * @description List the school_emails items.
     */
    get: operations["readItemsSchoolEmails"];
  };
  "/items/school_emails/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single school_emails item by unique identifier.
     */
    get: operations["readSingleItemsSchoolEmails"];
  };
  "/items/school_admins": {
    /**
     * List Items
     * @description List the school_admins items.
     */
    get: operations["readItemsSchoolAdmins"];
  };
  "/items/school_admins/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single school_admins item by unique identifier.
     */
    get: operations["readSingleItemsSchoolAdmins"];
  };
  "/items/schools": {
    /**
     * List Items
     * @description List the schools items.
     */
    get: operations["readItemsSchools"];
  };
  "/items/schools/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single schools item by unique identifier.
     */
    get: operations["readSingleItemsSchools"];
  };
  "/items/events": {
    /**
     * List Items
     * @description List the events items.
     */
    get: operations["readItemsEvents"];
  };
  "/items/events/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single events item by unique identifier.
     */
    get: operations["readSingleItemsEvents"];
  };
  "/items/site_settings_featured_schools": {
    /**
     * List Items
     * @description List the site_settings_featured_schools items.
     */
    get: operations["readItemsSiteSettingsFeaturedSchools"];
  };
  "/items/site_settings_featured_schools/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single site_settings_featured_schools item by unique identifier.
     */
    get: operations["readSingleItemsSiteSettingsFeaturedSchools"];
  };
  "/items/videos": {
    /**
     * List Items
     * @description List the videos items.
     */
    get: operations["readItemsVideos"];
  };
  "/items/videos/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single videos item by unique identifier.
     */
    get: operations["readSingleItemsVideos"];
  };
  "/items/site_settings": {
    /**
     * List Items
     * @description List the site_settings items.
     */
    get: operations["readItemsSiteSettings"];
  };
  "/items/site_settings/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single site_settings item by unique identifier.
     */
    get: operations["readSingleItemsSiteSettings"];
  };
  "/items/transport_routes": {
    /**
     * List Items
     * @description List the transport_routes items.
     */
    get: operations["readItemsTransportRoutes"];
  };
  "/items/transport_routes/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single transport_routes item by unique identifier.
     */
    get: operations["readSingleItemsTransportRoutes"];
  };
  "/items/school_phones": {
    /**
     * List Items
     * @description List the school_phones items.
     */
    get: operations["readItemsSchoolPhones"];
  };
  "/items/school_phones/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single school_phones item by unique identifier.
     */
    get: operations["readSingleItemsSchoolPhones"];
  };
  "/items/school_educational_path_links": {
    /**
     * List Items
     * @description List the school_educational_path_links items.
     */
    get: operations["readItemsSchoolEducationalPathLinks"];
  };
  "/items/school_educational_path_links/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single school_educational_path_links item by unique identifier.
     */
    get: operations["readSingleItemsSchoolEducationalPathLinks"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Query: {
      /**
       * @description Control what fields are being returned in the object.
       * @example [
       *   "*",
       *   "*.*"
       * ]
       */
      fields?: string[];
      /**
       * @example {
       *   "<field>": {
       *     "<operator>": "<value>"
       *   }
       * }
       */
      filter?: Record<string, never>;
      /** @description Filter by items that contain the given search query in one of their fields. */
      search?: string;
      /**
       * @description How to sort the returned items.
       * @example [
       *   "-date_created"
       * ]
       */
      sort?: string[];
      /** @description Set the maximum number of items that will be returned */
      limit?: number;
      /** @description How many items to skip when fetching data. */
      offset?: number;
      /** @description Cursor for use in pagination. Often used in combination with limit. */
      page?: number;
      /**
       * @description Deep allows you to set any of the other query parameters on a nested relational dataset.
       * @example {
       *   "related_articles": {
       *     "_limit": 3
       *   }
       * }
       */
      deep?: Record<string, never>;
    };
    "x-metadata": {
      /** @description Returns the total item count of the collection you're querying. */
      total_count?: number;
      /** @description Returns the item count of the collection you're querying, taking the current filter/search parameters into account. */
      filter_count?: number;
    };
    Folders: {
      /**
       * @description Unique identifier for the folder.
       * @example 0cf0e03d-4364-45df-b77b-ca61f61869d2
       */
      id?: string;
      /**
       * @description Name of the folder.
       * @example New York
       */
      name?: string;
      /**
       * @description Unique identifier of the parent folder. This allows for nested folders.
       * @example null
       */
      parent?: string | components["schemas"]["Folders"] | null;
    };
    Files: {
      /**
       * @description Unique identifier for the file.
       * @example 8cbb43fe-4cdf-4991-8352-c461779cec02
       */
      id?: string;
      /**
       * @description Where the file is stored. Either `local` for the local filesystem or the name of the storage adapter (for example `s3`).
       * @example local
       */
      storage?: string;
      /**
       * @description Name of the file on disk. By default, Directus uses a random hash for the filename.
       * @example a88c3b72-ac58-5436-a4ec-b2858531333a.jpg
       */
      filename_disk?: string;
      /**
       * @description How you want to the file to be named when it's being downloaded.
       * @example avatar.jpg
       */
      filename_download?: string;
      /**
       * @description Title for the file. Is extracted from the filename on upload, but can be edited by the user.
       * @example User Avatar
       */
      title?: string;
      /**
       * @description MIME type of the file.
       * @example image/jpeg
       */
      type?: string;
      /**
       * @description Virtual folder where this file resides in.
       * @example null
       */
      folder?: string | components["schemas"]["Folders"] | null;
      /**
       * @description Who uploaded the file.
       * @example 63716273-0f29-4648-8a2a-2af2948f6f78
       */
      uploaded_by?: string | components["schemas"]["Users"];
      /**
       * Format: date-time
       * @description When the file was created.
       * @example 2019-12-03T00:10:15+00:00
       */
      created_on?: string;
      /** Format: uuid */
      modified_by?: string | null;
      /** Format: timestamp */
      modified_on?: string;
      /**
       * @description Character set of the file.
       * @example binary
       */
      charset?: string | null;
      /**
       * @description Size of the file in bytes.
       * @example 137862
       */
      filesize?: number;
      /**
       * @description Width of the file in pixels. Only applies to images.
       * @example 800
       */
      width?: number | null;
      /**
       * @description Height of the file in pixels. Only applies to images.
       * @example 838
       */
      height?: number | null;
      /**
       * @description Duration of the file in seconds. Only applies to audio and video.
       * @example 0
       */
      duration?: number | null;
      /**
       * @description Where the file was embedded from.
       * @example null
       */
      embed?: string | null;
      /** @description Description for the file. */
      description?: string | null;
      /** @description Where the file was created. Is automatically populated based on Exif data for images. */
      location?: string | null;
      /** @description Tags for the file. Is automatically populated based on Exif data for images. */
      tags?: string[] | null;
      /** @description IPTC, Exif, and ICC metadata extracted from file */
      metadata?: Record<string, unknown> | null;
      focal_point_x?: number | null;
      focal_point_y?: number | null;
      tus_id?: string | null;
      tus_data?: unknown;
      /**
       * Format: date-time
       * @description When the file was last uploaded/replaced.
       * @example 2019-12-03T00:10:15+00:00
       */
      uploaded_on?: string;
    };
    ItemsEducationalPaths: {
      /** Format: uuid */
      id?: string;
      /** @description Name of the educational path */
      name: string;
      /** @description Short description of this educational path */
      description?: string | null;
      /** @description Detailed information about this educational path */
      details?: string | null;
      /** Format: timestamp */
      created_at?: string | null;
      /** Format: timestamp */
      updated_at?: string | null;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
    };
    ItemsSchoolTypes: {
      /** Format: uuid */
      id?: string;
      /** @description Name of the school type */
      name: string;
      /** @description Description of this school type */
      description?: string | null;
      /** Format: timestamp */
      created_at?: string | null;
      /** Format: timestamp */
      updated_at?: string | null;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
    };
    ItemsSchoolsEducationalPaths: {
      /** Format: uuid */
      id?: string;
      schools_id?: string | components["schemas"]["ItemsSchools"] | null;
      educational_paths_id?: string | components["schemas"]["ItemsEducationalPaths"] | null;
      /** Format: timestamp */
      created_at?: string | null;
      /** Format: timestamp */
      updated_at?: string | null;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
    };
    ItemsSchoolEmails: {
      /** Format: uuid */
      id?: string;
      /** @description Type of email (e.g. orientamento, segreteria, etc.) */
      description: string;
      email: string;
      sort?: number | null;
      /** Format: timestamp */
      created_at?: string | null;
      /** Format: timestamp */
      updated_at?: string | null;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      school?: string | components["schemas"]["ItemsSchools"] | null;
      label?: string | null;
    };
    ItemsSchoolAdmins: {
      /** Format: uuid */
      id?: string;
      /** Format: timestamp */
      created_at?: string | null;
      /** Format: timestamp */
      updated_at?: string | null;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** Format: uuid */
      user?: string | null;
      school?: string | components["schemas"]["ItemsSchools"] | null;
    };
    ItemsSchools: {
      /**
       * Format: uuid
       * @description Unique identifier for the school
       */
      id?: string;
      /** @description Full name of the school */
      name: string;
      /** @description Type of school */
      type?: string | components["schemas"]["ItemsSchoolTypes"] | null;
      /** @description School logo */
      logo?: string | components["schemas"]["Files"] | null;
      /** @description Official school website URL */
      website_url?: string | null;
      /** @description Brief description of the school */
      description?: string | null;
      /** @description Detailed information about the school */
      detailed_info?: string | null;
      /** @description Physical address of the school */
      address?: string | null;
      /** @description Geographic coordinates for map display */
      geo_location?: unknown;
      /** @description Is this the main campus? */
      main_campus?: boolean | null;
      /** @description Parent school (if this is a branch) */
      parent_school?: string | components["schemas"]["ItemsSchools"] | null;
      /** @description Does the school have a canteen? */
      canteen?: boolean | null;
      /** @description Does the school have boarding facilities? */
      boarding?: boolean | null;
      /** @description Contact email address */
      email?: string | null;
      /** @description Contact phone number */
      phone?: string | null;
      /** Format: timestamp */
      created_at?: string | null;
      /** Format: timestamp */
      updated_at?: string | null;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      /** @description School National ID (Codice Meccanografico) */
      miur_code?: string | null;
      /** @description Name of the person in charge of educational guidance */
      responsabile_orientamento?: string | null;
      short_name?: string | null;
      position?: unknown;
      admins?: ((string | components["schemas"]["ItemsSchoolAdmins"])[]) | null;
      events?: ((string | components["schemas"]["ItemsEvents"])[]) | null;
      school_phones?: ((string | components["schemas"]["ItemsSchoolPhones"])[]) | null;
      school_emails?: ((string | components["schemas"]["ItemsSchoolEmails"])[]) | null;
      videos?: ((string | components["schemas"]["ItemsVideos"])[]) | null;
      edu_links?: ((string | components["schemas"]["ItemsSchoolEducationalPathLinks"])[]) | null;
      branch_schools?: ((string | components["schemas"]["ItemsSchools"])[]) | null;
      transport_routes?: ((string | components["schemas"]["ItemsTransportRoutes"])[]) | null;
    };
    ItemsEvents: {
      /** Format: uuid */
      id?: string;
      /** @description Title of the event */
      title: string;
      /** @description Description of the event */
      description?: string | null;
      /**
       * Format: timestamp
       * @description Start date and time
       */
      start_date?: string;
      /**
       * Format: timestamp
       * @description End date and time
       */
      end_date?: string;
      /** @description Physical location of the event */
      location?: string | null;
      /** @description Is this an online event? */
      is_online?: boolean | null;
      /** @description Link to join the online event */
      online_link?: string | null;
      /** @description Event image or poster */
      image?: string | components["schemas"]["Files"] | null;
      /** Format: timestamp */
      created_at?: string | null;
      /** Format: timestamp */
      updated_at?: string | null;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      school?: string | components["schemas"]["ItemsSchools"] | null;
    };
    ItemsSiteSettingsFeaturedSchools: {
      /** Format: uuid */
      id?: string;
      schools_id?: string | components["schemas"]["ItemsSchools"] | null;
      sort?: number | null;
    };
    ItemsVideos: {
      /** Format: uuid */
      id?: string;
      /** @description Title of the video */
      title: string;
      /** @description Description of the video content */
      description?: string | null;
      /** @description Upload video file (leave empty if using YouTube link) */
      video_file?: string | components["schemas"]["Files"] | null;
      /** @description YouTube video ID (leave empty if uploading video file) */
      youtube_id?: string | null;
      /** @description Type of video content */
      type?: string | null;
      sort?: number | null;
      /** Format: timestamp */
      created_at?: string | null;
      /** Format: timestamp */
      updated_at?: string | null;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      school?: string | components["schemas"]["ItemsSchools"] | null;
    };
    ItemsSiteSettings: {
      /** Format: uuid */
      id?: string;
      /** @description The title of the website */
      site_title?: string | null;
      /** @description Welcome message displayed on the homepage */
      welcome_message?: string | null;
      /** @description Contact email for the site */
      contact_email?: string | null;
      /** @description Hero image for the homepage */
      homepage_hero_image?: string | components["schemas"]["Files"] | null;
      /** @description Text displayed in the footer of all pages */
      footer_text?: string | null;
      /** @description Social media links */
      social_media_links?: unknown;
      /** Format: timestamp */
      created_at?: string | null;
      /** Format: timestamp */
      updated_at?: string | null;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      site_logo?: string | components["schemas"]["Files"] | null;
      /** @description Possibile testo per gli open days come ad esempio l'appuntamento territoriale */
      open_days_intro?: string | null;
    };
    ItemsTransportRoutes: {
      /** Format: uuid */
      id?: string;
      /** @description Name of the route */
      name: string;
      /** @description Description of the route */
      description?: string | null;
      /** @description Starting point (e.g., Train Station, Bus Terminal) */
      start_point: string;
      /** @description Path of the route on the map */
      route_path?: unknown;
      /** @description Type of transportation */
      transportation_type?: string | null;
      /** @description Estimated travel time in minutes */
      estimated_time_minutes?: number | null;
      /** Format: timestamp */
      created_at?: string | null;
      /** Format: timestamp */
      updated_at?: string | null;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      school?: string | components["schemas"]["ItemsSchools"] | null;
    };
    ItemsSchoolPhones: {
      /** Format: uuid */
      id?: string;
      /** @description Type of phone (e.g. telefono, fax, etc.) */
      description: string;
      number: string;
      sort?: number | null;
      /** Format: timestamp */
      created_at?: string | null;
      /** Format: timestamp */
      updated_at?: string | null;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      school?: string | components["schemas"]["ItemsSchools"] | null;
      label?: string | null;
    };
    ItemsSchoolEducationalPathLinks: {
      /** Format: uuid */
      id?: string;
      /** @description URL to detailed information about this path at this school */
      link_url?: string | null;
      sort?: number | null;
      /** Format: timestamp */
      created_at?: string | null;
      /** Format: timestamp */
      updated_at?: string | null;
      /** Format: uuid */
      user_created?: string | null;
      /** Format: uuid */
      user_updated?: string | null;
      school?: string | components["schemas"]["ItemsSchools"] | null;
      educational_path?: string | components["schemas"]["ItemsEducationalPaths"] | null;
      name?: string | null;
    };
  };
  responses: {
    /** @description Error: Not found. */
    NotFoundError: {
      content: {
        "application/json": {
          error?: {
            /** Format: int64 */
            code?: number;
            message?: string;
          };
        };
      };
    };
    /** @description Error: Unauthorized request */
    UnauthorizedError: {
      content: {
        "application/json": {
          error?: {
            /** Format: int64 */
            code?: number;
            message?: string;
          };
        };
      };
    };
  };
  parameters: {
    /** @description Index */
    Id: number;
    /** @description Unique identifier for the object. */
    UUId: string;
    /** @description Collection of which you want to retrieve the items from. */
    Collection: string;
    /** @description Filter by items that contain the given search query in one of their fields. */
    Search?: string;
    /** @description Cursor for use in pagination. Often used in combination with limit. */
    Page?: number;
    /** @description How many items to skip when fetching data. */
    Offset?: number;
    /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
    Sort?: string[];
    /** @description What metadata to return in the response. */
    Meta?: string;
    /** @description A limit on the number of objects that are returned. */
    Limit?: number;
    /** @description Select items in collection by given conditions. */
    Filter?: string;
    /** @description Control what fields are being returned in the object. */
    Fields?: string[];
    /** @description Saves the API response to a file. Accepts one of "csv", "json", "xml", "yaml". */
    Export?: "csv" | "json" | "xml" | "yaml";
    /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version. */
    Version?: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get an Asset
   * @description Image typed files can be dynamically resized and transformed to fit any need.
   */
  getAsset: {
    parameters: {
      query?: {
        /** @description The key of the asset size configured in settings. */
        key?: string;
        /** @description A JSON array of image transformations */
        transforms?: string;
        /** @description Download the asset to your computer */
        download?: boolean;
      };
      path: {
        /** @description The id of the file. */
        id: string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "text/plain": string;
        };
      };
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Retrieve a Temporary Access Token
   * @description Retrieve a Temporary Access Token
   */
  login: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Email address of the user you're retrieving the access token for.
           * @example admin@example.com
           */
          email: string;
          /**
           * Format: password
           * @description Password of the user.
           * @example password
           */
          password: string;
          /**
           * @description Whether to retrieve the refresh token in the JSON response, or in a httpOnly cookie.
           * @default json
           * @enum {string}
           */
          mode?: "json" | "cookie" | "session";
          /** @description The user's one-time-password (if MFA is enabled). */
          otp?: string;
        };
      };
    };
    responses: {
      /** @description Successful authentification */
      200: {
        content: {
          "application/json": {
            data?: {
              /** @example eyJhbGciOiJI... */
              access_token?: string;
              /** @example 900 */
              expires?: number;
              /** @example yuOJkjdPXMd... */
              refresh_token?: string;
            };
          };
        };
      };
    };
  };
  /**
   * Refresh Token
   * @description Refresh a Temporary Access Token.
   */
  refresh: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description JWT access token you want to refresh. This token can't be expired.
           * @example eyJ0eXAiOiJKV...
           */
          refresh_token?: string;
          /**
           * @description Whether to submit and retrieve the refresh token in the JSON response, or in a httpOnly cookie.
           * @default json
           * @enum {string}
           */
          mode?: "json" | "cookie" | "session";
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: {
              /** @example eyJhbGciOiJI... */
              access_token?: string;
              /** @example 900 */
              expires?: number;
              /** @example Gy-caJMpmGTA... */
              refresh_token?: string;
            };
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Log Out
   * @description Log Out
   */
  logout: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description The refresh token to invalidate. If you have the refresh token in a cookie through /auth/login, you don't have to submit it here.
           * @example eyJ0eXAiOiJKV...
           */
          refresh_token?: string;
          /**
           * @description Whether the refresh token is submitted in the JSON response, or in a httpOnly cookie.
           * @enum {string}
           */
          mode?: "json" | "cookie" | "session";
        };
      };
    };
    responses: {
      /** @description Request successful */
      200: {
        content: never;
      };
    };
  };
  /**
   * Request a Password Reset
   * @description Request a reset password email to be send.
   */
  passwordRequest: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Email address of the user you're requesting a reset for.
           * @example admin@example.com
           */
          email: string;
        };
      };
    };
    responses: {
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Reset a Password
   * @description The request a password reset endpoint sends an email with a link to the admin app which in turn uses this endpoint to allow the user to reset their password.
   */
  passwordReset: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description One-time use JWT token that is used to verify the user.
           * @example eyJ0eXAiOiJKV1Qi...
           */
          token: string;
          /**
           * Format: password
           * @description New password for the user.
           * @example password
           */
          password: string;
        };
      };
    };
    responses: {
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * List OAuth Providers
   * @description List configured OAuth providers.
   */
  oauth: {
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            public?: boolean;
            /**
             * @example [
             *   "github",
             *   "facebook"
             * ]
             */
            data?: string[];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Authenticated using an OAuth provider
   * @description Start OAuth flow using the specified provider
   */
  oauthProvider: {
    parameters: {
      query?: {
        /** @description Where to redirect on successful login.<br/>If set the authentication details are set inside cookies otherwise a JSON is returned. */
        redirect?: string;
      };
      path: {
        /** @description Key of the activated OAuth provider. */
        provider: string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            public?: boolean;
            data?: {
              token?: string;
            };
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * System Info
   * @description Perform a system status check and return the options.
   */
  serverInfo: {
    parameters: {
      query: {
        /** @description The first time you create a project, the provided token will be saved and required for subsequent project installs. It can also be found and configured in `/config/__api.json` on your server. */
        super_admin_token: number;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: Record<string, never>;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Ping
   * @description Ping, pong. Ping.. pong.
   */
  ping: {
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/text": string;
        };
      };
    };
  };
  /**
   * List Folders
   * @description List the folders.
   */
  getFolders: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Folders"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Retrieve a Folder
   * @description Retrieve a single folder by unique identifier.
   */
  getFolder: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Folders"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Files
   * @description List the files.
   */
  getFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Files"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve a Files
   * @description Retrieve a single file by unique identifier.
   */
  getFile: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Files"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * List Items
   * @description List the educational_paths items.
   */
  readItemsEducationalPaths: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEducationalPaths"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single educational_paths item by unique identifier.
   */
  readSingleItemsEducationalPaths: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEducationalPaths"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the school_types items.
   */
  readItemsSchoolTypes: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSchoolTypes"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single school_types item by unique identifier.
   */
  readSingleItemsSchoolTypes: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSchoolTypes"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the schools_educational_paths items.
   */
  readItemsSchoolsEducationalPaths: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSchoolsEducationalPaths"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single schools_educational_paths item by unique identifier.
   */
  readSingleItemsSchoolsEducationalPaths: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSchoolsEducationalPaths"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the school_emails items.
   */
  readItemsSchoolEmails: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSchoolEmails"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single school_emails item by unique identifier.
   */
  readSingleItemsSchoolEmails: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSchoolEmails"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the school_admins items.
   */
  readItemsSchoolAdmins: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSchoolAdmins"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single school_admins item by unique identifier.
   */
  readSingleItemsSchoolAdmins: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSchoolAdmins"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the schools items.
   */
  readItemsSchools: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSchools"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single schools item by unique identifier.
   */
  readSingleItemsSchools: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSchools"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the events items.
   */
  readItemsEvents: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEvents"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single events item by unique identifier.
   */
  readSingleItemsEvents: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsEvents"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the site_settings_featured_schools items.
   */
  readItemsSiteSettingsFeaturedSchools: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSiteSettingsFeaturedSchools"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single site_settings_featured_schools item by unique identifier.
   */
  readSingleItemsSiteSettingsFeaturedSchools: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSiteSettingsFeaturedSchools"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the videos items.
   */
  readItemsVideos: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVideos"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single videos item by unique identifier.
   */
  readSingleItemsVideos: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVideos"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the site_settings items.
   */
  readItemsSiteSettings: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSiteSettings"];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single site_settings item by unique identifier.
   */
  readSingleItemsSiteSettings: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSiteSettings"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the transport_routes items.
   */
  readItemsTransportRoutes: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTransportRoutes"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single transport_routes item by unique identifier.
   */
  readSingleItemsTransportRoutes: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTransportRoutes"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the school_phones items.
   */
  readItemsSchoolPhones: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSchoolPhones"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single school_phones item by unique identifier.
   */
  readSingleItemsSchoolPhones: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSchoolPhones"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the school_educational_path_links items.
   */
  readItemsSchoolEducationalPathLinks: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSchoolEducationalPathLinks"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single school_educational_path_links item by unique identifier.
   */
  readSingleItemsSchoolEducationalPathLinks: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSchoolEducationalPathLinks"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
}


export type Schema = {
  educational_paths: components["schemas"]["ItemsEducationalPaths"][];
  school_types: components["schemas"]["ItemsSchoolTypes"][];
  schools_educational_paths: components["schemas"]["ItemsSchoolsEducationalPaths"][];
  school_emails: components["schemas"]["ItemsSchoolEmails"][];
  school_admins: components["schemas"]["ItemsSchoolAdmins"][];
  schools: components["schemas"]["ItemsSchools"][];
  events: components["schemas"]["ItemsEvents"][];
  site_settings_featured_schools: components["schemas"]["ItemsSiteSettingsFeaturedSchools"][];
  videos: components["schemas"]["ItemsVideos"][];
  transport_routes: components["schemas"]["ItemsTransportRoutes"][];
  school_phones: components["schemas"]["ItemsSchoolPhones"][];
  school_educational_path_links: components["schemas"]["ItemsSchoolEducationalPathLinks"][];
};

